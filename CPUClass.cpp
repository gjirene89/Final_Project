//************************************************************************//
//	CPUClass.cpp
//	2016-11-23
//	Irene Gersenowies
//************************************************************************//

//=======================================================================//
//		インクルード
//=======================================================================//
#include "CPUClass.h"

//==============================================================================
//  関数名        CCpu	
//  説明          CCpuクラスのコンストラクタ
//------------------------------------------------------------------------------
//	引数
//          なし
//	戻り値
//          なし
//==============================================================================
CCpu::CCpu()
{
	//空
}

//==============================================================================
//  関数名        CCpu	
//  説明          CCpuクラスのコンストラクタ
//------------------------------------------------------------------------------
//	引数
//          CCpu& other			CCpuのインスタンス
//	戻り値
//          なし
//==============================================================================
CCpu::CCpu(const CCpu& other)
{
	//空
}

//==============================================================================
//  関数名        〜CCpu	
//  説明          CCpuクラスのデストラクタ
//------------------------------------------------------------------------------
//	引数
//          なし
//	戻り値
//          なし
//==============================================================================
CCpu::~CCpu()
{
	//空
}

//==============================================================================
//  関数名		 Initialize	
//  説明			 CCpuの初期関数
//------------------------------------------------------------------------------
//	引数
//          なし
//	戻り値
//          なし
//==============================================================================
void CCpu::Initialize()
{
	PDH_STATUS status;

	//CPU利用率にアクセスできるフラグを初期化する
	m_canReadCpu = true;

	//クエリーオブジェクト作成
	status = PdhOpenQuery(nullptr, 0, &m_queryHandle);
	if (status != ERROR_SUCCESS)
	{
		m_canReadCpu = false;
	}

	//システムのCPUに問い合わせするクエリーオブジェクトを設定する
	status = PdhAddCounter(m_queryHandle, TEXT("\\Processor(_Total)\\% processor time"), 0, &m_counterHandle);
	if (status != ERROR_SUCCESS)
	{
		m_canReadCpu = false;
	}

	m_lastSampleTime = GetTickCount();

	m_cpuUsage = 0;

	return;
}

//==============================================================================
//  関数名		 Shutdown	
//  説明			 CCpuの解放
//------------------------------------------------------------------------------
//	引数
//          なし
//	戻り値
//          なし
//==============================================================================
void CCpu::Shutdown()
{
	//クエリーを閉じる
	if (m_canReadCpu)
	{
		PdhCloseQuery(m_queryHandle);
	}

	return;
}

//==============================================================================
//  関数名		 Frame	
//  説明			 CCpuの毎フレーム更新関数
//------------------------------------------------------------------------------
//	引数
//          なし
//	戻り値
//          なし
//==============================================================================
void CCpu::Frame()
{
	PDH_FMT_COUNTERVALUE value;

	if (m_canReadCpu)
	{
		if ((m_lastSampleTime + 1000) < GetTickCount())
		{
			m_lastSampleTime = GetTickCount();

			PdhCollectQueryData(m_queryHandle);

			PdhGetFormattedCounterValue(m_counterHandle, PDH_FMT_LONG, nullptr, &value);

			m_cpuUsage = value.longValue;
		}
	}

	return;
}

//==============================================================================
//  関数名		 GetCpuPercentage	
//  説明			 CPU利用率を戻す関数
//------------------------------------------------------------------------------
//	引数
//          なし
//	戻り値
//          int    usage         CPU利用率
//==============================================================================
int CCpu::GetCpuPercentage()
{
	int usage;

	if (m_canReadCpu)
	{
		usage = (int)m_cpuUsage;
	}
	else
	{
		usage = 0;
	}

	return usage;
}

//******************************************************************************
//	End of file.
//******************************************************************************