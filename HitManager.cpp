//*****************************************************************************
//!	@file	HitManager.cpp
//!	@brief	
//!	@note	あたり判定用
//!	@author	イレネ　ヘルセノウイス　ハソ
//*****************************************************************************

//-----------------------------------------------------------------------------
//	ヘッダ−
//-----------------------------------------------------------------------------
# include "HitManager.h"
//# include "CDirectxGraphics.h"
# include <stdio.h>
//# include "Debug.h"
//# include "input.h"

//-----------------------------------------------------------------------------
//	グローバル変数
//-----------------------------------------------------------------------------
int HitManager::nHitCnt;
CHit_Base* HitManager::hitList[MAX_HIT_CNT];

//==============================================================================
//!	@fn		HitManager
//!	@brief	あたり判定の配列のコンストラクタ
//!	@param	なし
//!	@retval	なし
//==============================================================================
HitManager::HitManager(void)
{
	//font.CreateFontA();
	isVisible = false;
	nHitCnt = 0;

}

//==============================================================================
//!	@fn		~HitManager()
//!	@brief	あたり判定の配列のデストラクタ
//!	@param	なし
//!	@retval	なし
//==============================================================================
HitManager::~HitManager(void)
{
	isVisible = false;
	nHitCnt = 0;
}

//==============================================================================
//!	@fn		Init
//!	@brief	あたり判定の配列のデータを初期化する
//!	@param	なし
//!	@retval	なし
//==============================================================================
void HitManager::Init(void)
{
	//個数をゼロに戻す
	nHitCnt = 0;
}

//==============================================================================
//!	@fn		Reset
//!	@brief	あたり判定の配列のデータをリセットする
//!	@param	なし
//!	@retval	なし
//==============================================================================
void HitManager::Reset(void)
{
	//個数をゼロに戻す
	nHitCnt = 0;
}


//==============================================================================
//!	@fn		Render
//!	@brief	あたり判定を描画する
//!	@param	なし
//!	@retval	なし
//==============================================================================
void HitManager::Render(void)
{
	//if (CDebug::GetIsHidden() || !CDebug::displayCollision)	return;

	for (int i = 0; i < nHitCnt; i++)
	{
		hitList[i]->Render();
	}
}

//==============================================================================
//!	@fn		AddHit
//!	@brief	あたり判定の配列にオブジェクトを追加する
//!	@param	GameObjHit	追加するオブジェクト
//!	@retval	なし
//==============================================================================
void HitManager::AddHit(CHit_Base *newObj)
{
	//配列の最大数を超えたら、追加しない
	if (nHitCnt >= MAX_HIT_CNT)
		return;

	//オブジェクトを追加する
	hitList[nHitCnt] = newObj;
	hitList[nHitCnt]->Initialize();
	nHitCnt++;
}

//==============================================================================
//!	@fn		CheckHit
//!	@brief	あたり判定の配列にオブジェクトを追加する
//!	@param	GameObjHit	オブジェクト自身
//! @param	GAMEOBJTYPE 探しているオブジェクトの種類
//!	@retval	true : 当たっている　　　false : 当たっていない
//==============================================================================
CGameObjectBase* HitManager::CheckHit(CHit_Base *pHit, GAMEHIT_TYPE  objType)
{
	CGameObjectBase* tempHit;
	for (int i = 0; i < nHitCnt; i++)
	{
		tempHit = pHit->CheckHit(hitList[i], objType);
		if (tempHit!=nullptr)
		{
			pHit->Highlight();
			return tempHit;
		}
	}

	return nullptr;
}

bool HitManager::CheckStage(CHit_Base *pHit)
{
	return pHit->CheckStage();
}

//******************************************************************************
//	End of file.
//******************************************************************************
