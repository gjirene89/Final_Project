//************************************************************************//
//	LightClass.cpp
//	2016-11-09
//	Irene Gersenowies
//************************************************************************//

//=======================================================================//
//		インクルード
//=======================================================================//
#include "LightClass.h"

//==============================================================================
//  関数名        CLight	
//  説明          CLightクラスのコンストラクタ
//------------------------------------------------------------------------------
//	引数
//          なし
//	戻り値
//          なし
//==============================================================================
CLight::CLight()
{
	//空
}

//==============================================================================
//  関数名        CLight	
//  説明          CLightクラスのコンストラクタ
//------------------------------------------------------------------------------
//	引数
//          CLight& other			CLightのインスタンス
//	戻り値
//          なし
//==============================================================================
CLight::CLight(const CLight& other)
{
	//空
}

//==============================================================================
//  関数名        〜CLight	
//  説明          CLightクラスのデストラクタ
//------------------------------------------------------------------------------
//	引数
//          なし
//	戻り値
//          なし
//==============================================================================
CLight::~CLight()
{
	//空
}

//==============================================================================
//  関数名		 SetAmbientColor	
//  説明			 環境色をセットする関数
//------------------------------------------------------------------------------
//	引数
//          float           red              赤
//          float           green            緑
//          float           blue             青
//          float           alpha            アルファ
//	戻り値
//          なし
//==============================================================================
void CLight::SetAmbientColor(float red, float green, float blue, float alpha)
{
	m_ambientColor = XMFLOAT4(red, green, blue, alpha);

	return;
}

//==============================================================================
//  関数名		 SetDiffuseColor	
//  説明			 拡散色をセットする関数
//------------------------------------------------------------------------------
//	引数
//          float           red              赤
//          float           green            緑
//          float           blue             青
//          float           alpha            アルファ
//	戻り値
//          なし
//==============================================================================
void CLight::SetDiffuseColor(float red, float green, float blue, float alpha)
{
	m_diffuseColor = XMFLOAT4(red, green, blue, alpha);
	
	return;
}

//==============================================================================
//  関数名		 SetPosition	
//  説明			 位置をセットする関数
//------------------------------------------------------------------------------
//	引数
//          float           x            x軸
//          float           y            y軸
//          float           z            z軸
//	戻り値
//          なし
//==============================================================================
void CLight::SetPosition(float x, float y, float z)
{
	m_position = XMFLOAT3(x, y, z);

	return;
}

//==============================================================================
//  関数名		 SetLookAt	
//  説明			 光の見ている位置をセットする
//------------------------------------------------------------------------------
//	引数
//          float           x            x軸
//          float           y            y軸
//          float           z            z軸
//	戻り値
//          なし
//==============================================================================
void CLight::SetLookAt(float x, float y, float z)
{
	m_lookAt.x = x;
	m_lookAt.y = y;
	m_lookAt.z = z;

	return;
}

//==============================================================================
//  関数名		 SetDirection	
//  説明			 光の向いている方向をセットする
//------------------------------------------------------------------------------
//	引数
//          float           x            x軸
//          float           y            y軸
//          float           z            z軸
//	戻り値
//          なし
//==============================================================================
void CLight::SetDirection(float x, float y, float z)
{
	m_direction = XMFLOAT3(x, y, z);

	return;
}

//==============================================================================
//  関数名		 SetSpecularColor	
//  説明			 鏡面光の色をセットする
//------------------------------------------------------------------------------
//	引数
//          float           red              赤
//          float           green            緑
//          float           blue             青
//          float           alpha            アルファ
//	戻り値
//          なし
//==============================================================================
void CLight::SetSpecularColor(float red, float green, float blue, float alpha)
{
	m_specularColor = XMFLOAT4(red, green, blue, alpha);

	return;
}

//==============================================================================
//  関数名		 SetSpecularPower	
//  説明			 鏡面力の値をセットする関数
//------------------------------------------------------------------------------
//	引数
//          float         power				鏡面力の値
//	戻り値
//          なし
//==============================================================================
void CLight::SetSpecularPower(float power)
{
	m_specularPower = power;

	return;
}

//==============================================================================
//  関数名		 GetAmbientColor	
//  説明			 環境光の色を戻す関数
//------------------------------------------------------------------------------
//	引数
//          なし
//	戻り値
//          XMFLOAT4        ambientColor        環境光の色
//==============================================================================
XMFLOAT4 CLight::GetAmbientColor()
{
	return m_ambientColor;
}

//==============================================================================
//  関数名		 GetDiffuseColor	
//  説明			 拡散光の色を戻す関数
//------------------------------------------------------------------------------
//	引数
//          なし
//	戻り値
//          XMFLOAT4        diffuseColor        拡散光の色
//==============================================================================
XMFLOAT4 CLight::GetDiffuseColor()
{
	return m_diffuseColor;
}

//==============================================================================
//  関数名		 GetPosition	
//  説明			 光源の位置を戻す関数
//------------------------------------------------------------------------------
//	引数
//          なし
//	戻り値
//          XMFLOAT3        position        光源の位置
//==============================================================================
XMFLOAT3 CLight::GetPosition()
{
	return m_position;
}

//==============================================================================
//  関数名		 GetDirection	
//  説明			 光源の向いている方向を戻す関数
//------------------------------------------------------------------------------
//	引数
//          なし
//	戻り値
//          XMFLOAT3        direction        光源の向いている方向
//==============================================================================
XMFLOAT3 CLight::GetDirection()
{
	return m_direction;
}

//==============================================================================
//  関数名		 GetSpecularColor	
//  説明			 鏡面光色を戻す関数
//------------------------------------------------------------------------------
//	引数
//          なし
//	戻り値
//          XMFLOAT4        specularColor        鏡面光色
//==============================================================================
XMFLOAT4 CLight::GetSpecularColor()
{
	return m_specularColor;
}

//==============================================================================
//  関数名		 GetSpecularPower	
//  説明			 鏡面光力の値を戻す関数
//------------------------------------------------------------------------------
//	引数
//          なし
//	戻り値
//          float        specularPower        鏡面光力
//==============================================================================
float CLight::GetSpecularPower()
{
	return m_specularPower;
}

//==============================================================================
//  関数名		 GenerateViewMatrix	
//  説明			 光からのビュー マトリックスを戻す関数
//------------------------------------------------------------------------------
//	引数
//          なし
//	戻り値
//          なし
//==============================================================================
void CLight::GenerateViewMatrix()
{
	XMFLOAT3 up;
	XMVECTOR positionMatrix, viewMatrix, upMatrix;

	//上向きのベクトルを定義する
	up.x = 0.0f;
	up.y = 1.0f;
	up.z = 0.0f;

	//XMVECTORへの変換
	upMatrix = XMLoadFloat3(&up);
	positionMatrix = XMLoadFloat3(&m_position);
	viewMatrix = XMLoadFloat3(&m_lookAt);

	//ビュー行列を作成する
	m_viewMatrix = XMMatrixLookAtLH(positionMatrix, viewMatrix, upMatrix);

	return;
}

//==============================================================================
//  関数名		 GenerateProjectionMatrix	
//  説明			 光からのプロジェクション マトリックスを戻す関数
//------------------------------------------------------------------------------
//	引数
//          float       screenDepth           画面の奥
//          float       screenNear            画面の最も近いところ
//	戻り値
//          なし
//==============================================================================
void CLight::GenerateProjectionMatrix(float screenDepth, float screenNear)
{
	float fieldOfView, screenAspect;

	//プロジェクションマトリクス設定
	fieldOfView = (float)XM_PI / 2.0f;
	screenAspect = 1.0f;

	//光のプロジェクションマトリクス作成
	m_projectionMatrix = XMMatrixPerspectiveFovLH(fieldOfView, screenAspect, screenNear, screenDepth);
	
	return;
}

//==============================================================================
//  関数名		 GenerateOrthoMatrix	
//  説明			 光からの正投影 マトリックスを戻す関数
//------------------------------------------------------------------------------
//	引数
//          なし
//	戻り値
//          なし
//==============================================================================
void CLight::GenerateOrthoMatrix(float width, float height, float depthPlane, float nearPlane)
{
	m_orthoMatrix = XMMatrixOrthographicLH(width, height, nearPlane, depthPlane);

	return;
}

//==============================================================================
//  関数名		 GetViewMatrix	
//  説明			 光からのビュー マトリックスを戻す関数
//------------------------------------------------------------------------------
//	引数
//          XMMATRIX&       viewMatrix            戻し用のビューマトリックス
//	戻り値
//          なし
//==============================================================================
void CLight::GetViewMatrix(XMMATRIX& viewMatrix)
{
	viewMatrix = m_viewMatrix;
	return;
}

//==============================================================================
//  関数名		 GetProjectionMatrix	
//  説明			 光からのプロジェクション マトリックスを戻す関数
//------------------------------------------------------------------------------
//	引数
//          XMMATRIX&       projectionMatrix      戻し用のプロジェクションマトリックス
//	戻り値
//          なし
//==============================================================================
void CLight::GetProjectionMatrix(XMMATRIX& projectionMatrix)
{
	projectionMatrix = m_projectionMatrix;
	return;
}

//==============================================================================
//  関数名		 GetProjectionMatrix	
//  説明			 光からの正投影 マトリックスを戻す関数
//------------------------------------------------------------------------------
//	引数
//          XMMATRIX&       orthoMatrix      戻し用の正投影マトリックス
//	戻り値
//          なし
//==============================================================================
void CLight::GetOrthoMatrix(XMMATRIX& orthoMatrix)
{
	orthoMatrix = m_orthoMatrix;
	return;
}